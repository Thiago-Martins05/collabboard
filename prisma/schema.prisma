// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  createdAt     DateTime     @default(now())
  Invite        Invite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * Multi-tenant *
 */
model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  ownerId     String
  memberships Membership[]
  boards      Board[]
  createdAt   DateTime     @default(now())
  Invite      Invite[]
}

model Membership {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           Role     @default(MEMBER)
  createdAt      DateTime @default(now())

  //relations

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

/**
 * Kanban *
 */
model Board {
  id             String   @id @default(cuid())
  organizationId String
  title          String
  columns        Column[]
  labels         Label[]
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Column {
  id      String @id @default(cuid())
  boardId String
  title   String
  index   Int
  cards   Card[]

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId, index])
}

model Card {
  id          String  @id @default(cuid())
  columnId    String
  title       String
  description String?
  index       Int

  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  cardLabels  CardLabel[]

  @@index([columnId, index])
}

/**
 * Labels *
 */
model Label {
  id      String @id @default(cuid())
  boardId String
  name    String
  color   String // hex color code
  createdAt DateTime @default(now())

  board      Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cardLabels CardLabel[]

  @@index([boardId])
}

model CardLabel {
  id      String @id @default(cuid())
  cardId  String
  labelId String
  createdAt DateTime @default(now())

  card  Card  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([cardId, labelId])
  @@index([cardId])
  @@index([labelId])
}

/**
 * Convites & Billing (para etapas futuras) *
 */
model Invitation {
  id             String   @id @default(cuid())
  email          String
  role           Role     @default(MEMBER)
  token          String   @unique
  expiresAt      DateTime
  organizationId String
}

model Subscription {
  id               String    @id @default(cuid())
  organizationId   String    @unique
  stripeSubId      String?
  status           String?
  plan             String? // FREE | PRO
  currentPeriodEnd DateTime?
}

model FeatureLimit {
  id             String @id @default(cuid())
  organizationId String @unique
  maxBoards      Int    @default(3)
  maxMembers     Int    @default(5)
}

// ---- RBAC ----

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

model Invite {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  token          String       @unique
  role           Role         @default(MEMBER)
  invitedById    String
  status         InviteStatus @default(PENDING)
  expiresAt      DateTime

  createdAt  DateTime  @default(now())
  acceptedAt DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
}
